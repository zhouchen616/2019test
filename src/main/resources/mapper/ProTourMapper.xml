<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.holyrobot.con_product.mapper.ProTourMapper" >
  <resultMap id="BaseResultMap" type="com.holyrobot.con_product.pojo.ProTour" >
    <id column="ID" property="id" jdbcType="CHAR" />
    <result column="ProID" property="proid" jdbcType="CHAR" />
    <result column="TourNo" property="tourno" jdbcType="VARCHAR" />
    <result column="TourName" property="tourname" jdbcType="VARCHAR" />
    <result column="TourDate" property="tourdate" jdbcType="DATE" />
    <result column="DueDate" property="duedate" jdbcType="DATE" />
    <result column="PlanNum" property="plannum" jdbcType="INTEGER" />
    <result column="MinNum" property="minnum" jdbcType="INTEGER" />
    <result column="SeatNum" property="seatnum" jdbcType="INTEGER" />
    <result column="RefDepFlight" property="refdepflight" jdbcType="VARCHAR" />
    <result column="RefBackFlight" property="refbackflight" jdbcType="VARCHAR" />
    <result column="TourStatus" property="tourstatus" jdbcType="INTEGER" />
    <result column="CreatedDate" property="createddate" jdbcType="TIMESTAMP" />
    <result column="CreatedBy" property="createdby" jdbcType="VARCHAR" />
    <result column="CreatedByID" property="createdbyid" jdbcType="CHAR" />
    <result column="DeptID" property="deptid" jdbcType="CHAR" />
    <result column="OrgID" property="orgid" jdbcType="CHAR" />
    <result column="RevisedDate" property="reviseddate" jdbcType="TIMESTAMP" />
    <result column="RevisedBy" property="revisedby" jdbcType="VARCHAR" />
    <result column="IsTail" property="istail" jdbcType="INTEGER" />
    <result column="TailAuditStatus" property="tailauditstatus" jdbcType="INTEGER" />
    <result column="IsAck" property="isack" jdbcType="INTEGER" />
    <result column="HasTraffic" property="hastraffic" jdbcType="INTEGER" />
    <result column="IsUseDiscount" property="isusediscount" jdbcType="BIT" />
    <result column="IsSigned" property="issigned" jdbcType="INTEGER" />
    <result column="TourEscortNum" property="tourescortnum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, ProID, TourNo, TourName, TourDate, DueDate, PlanNum, MinNum, SeatNum, RefDepFlight,
    RefBackFlight, TourStatus, CreatedDate, CreatedBy, CreatedByID, DeptID, OrgID, RevisedDate,
    RevisedBy, IsTail, TailAuditStatus, IsAck, HasTraffic, IsUseDiscount, IsSigned, TourEscortNum
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.holyrobot.con_product.pojo.ProTourExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from Pro_Tour
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from Pro_Tour
    where ID = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from Pro_Tour
    where ID = #{id,jdbcType=CHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.holyrobot.con_product.pojo.ProTourExample" >
    delete from Pro_Tour
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.holyrobot.con_product.pojo.ProTour" >
    insert into Pro_Tour (ID, ProID, TourNo,
      TourName, TourDate, DueDate,
      PlanNum, MinNum, SeatNum,
      RefDepFlight, RefBackFlight, TourStatus,
      CreatedDate, CreatedBy, CreatedByID,
      DeptID, OrgID, RevisedDate,
      RevisedBy, IsTail, TailAuditStatus,
      IsAck, HasTraffic, IsUseDiscount,
      IsSigned, TourEscortNum)
    values (#{id,jdbcType=CHAR}, #{proid,jdbcType=CHAR}, #{tourno,jdbcType=VARCHAR},
      #{tourname,jdbcType=VARCHAR}, #{tourdate,jdbcType=DATE}, #{duedate,jdbcType=DATE},
      #{plannum,jdbcType=INTEGER}, #{minnum,jdbcType=INTEGER}, #{seatnum,jdbcType=INTEGER},
      #{refdepflight,jdbcType=VARCHAR}, #{refbackflight,jdbcType=VARCHAR}, #{tourstatus,jdbcType=INTEGER},
      #{createddate,jdbcType=TIMESTAMP}, #{createdby,jdbcType=VARCHAR}, #{createdbyid,jdbcType=CHAR},
      #{deptid,jdbcType=CHAR}, #{orgid,jdbcType=CHAR}, #{reviseddate,jdbcType=TIMESTAMP},
      #{revisedby,jdbcType=VARCHAR}, #{istail,jdbcType=INTEGER}, #{tailauditstatus,jdbcType=INTEGER},
      #{isack,jdbcType=INTEGER}, #{hastraffic,jdbcType=INTEGER}, #{isusediscount,jdbcType=BIT},
      #{issigned,jdbcType=INTEGER}, #{tourescortnum,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.holyrobot.con_product.pojo.ProTour" >
    insert into Pro_Tour
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="proid != null" >
        ProID,
      </if>
      <if test="tourno != null" >
        TourNo,
      </if>
      <if test="tourname != null" >
        TourName,
      </if>
      <if test="tourdate != null" >
        TourDate,
      </if>
      <if test="duedate != null" >
        DueDate,
      </if>
      <if test="plannum != null" >
        PlanNum,
      </if>
      <if test="minnum != null" >
        MinNum,
      </if>
      <if test="seatnum != null" >
        SeatNum,
      </if>
      <if test="refdepflight != null" >
        RefDepFlight,
      </if>
      <if test="refbackflight != null" >
        RefBackFlight,
      </if>
      <if test="tourstatus != null" >
        TourStatus,
      </if>
      <if test="createddate != null" >
        CreatedDate,
      </if>
      <if test="createdby != null" >
        CreatedBy,
      </if>
      <if test="createdbyid != null" >
        CreatedByID,
      </if>
      <if test="deptid != null" >
        DeptID,
      </if>
      <if test="orgid != null" >
        OrgID,
      </if>
      <if test="reviseddate != null" >
        RevisedDate,
      </if>
      <if test="revisedby != null" >
        RevisedBy,
      </if>
      <if test="istail != null" >
        IsTail,
      </if>
      <if test="tailauditstatus != null" >
        TailAuditStatus,
      </if>
      <if test="isack != null" >
        IsAck,
      </if>
      <if test="hastraffic != null" >
        HasTraffic,
      </if>
      <if test="isusediscount != null" >
        IsUseDiscount,
      </if>
      <if test="issigned != null" >
        IsSigned,
      </if>
      <if test="tourescortnum != null" >
        TourEscortNum,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="proid != null" >
        #{proid,jdbcType=CHAR},
      </if>
      <if test="tourno != null" >
        #{tourno,jdbcType=VARCHAR},
      </if>
      <if test="tourname != null" >
        #{tourname,jdbcType=VARCHAR},
      </if>
      <if test="tourdate != null" >
        #{tourdate,jdbcType=DATE},
      </if>
      <if test="duedate != null" >
        #{duedate,jdbcType=DATE},
      </if>
      <if test="plannum != null" >
        #{plannum,jdbcType=INTEGER},
      </if>
      <if test="minnum != null" >
        #{minnum,jdbcType=INTEGER},
      </if>
      <if test="seatnum != null" >
        #{seatnum,jdbcType=INTEGER},
      </if>
      <if test="refdepflight != null" >
        #{refdepflight,jdbcType=VARCHAR},
      </if>
      <if test="refbackflight != null" >
        #{refbackflight,jdbcType=VARCHAR},
      </if>
      <if test="tourstatus != null" >
        #{tourstatus,jdbcType=INTEGER},
      </if>
      <if test="createddate != null" >
        #{createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdby != null" >
        #{createdby,jdbcType=VARCHAR},
      </if>
      <if test="createdbyid != null" >
        #{createdbyid,jdbcType=CHAR},
      </if>
      <if test="deptid != null" >
        #{deptid,jdbcType=CHAR},
      </if>
      <if test="orgid != null" >
        #{orgid,jdbcType=CHAR},
      </if>
      <if test="reviseddate != null" >
        #{reviseddate,jdbcType=TIMESTAMP},
      </if>
      <if test="revisedby != null" >
        #{revisedby,jdbcType=VARCHAR},
      </if>
      <if test="istail != null" >
        #{istail,jdbcType=INTEGER},
      </if>
      <if test="tailauditstatus != null" >
        #{tailauditstatus,jdbcType=INTEGER},
      </if>
      <if test="isack != null" >
        #{isack,jdbcType=INTEGER},
      </if>
      <if test="hastraffic != null" >
        #{hastraffic,jdbcType=INTEGER},
      </if>
      <if test="isusediscount != null" >
        #{isusediscount,jdbcType=BIT},
      </if>
      <if test="issigned != null" >
        #{issigned,jdbcType=INTEGER},
      </if>
      <if test="tourescortnum != null" >
        #{tourescortnum,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.holyrobot.con_product.pojo.ProTourExample" resultType="java.lang.Integer" >
    select count(*) from Pro_Tour
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Pro_Tour
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=CHAR},
      </if>
      <if test="record.proid != null" >
        ProID = #{record.proid,jdbcType=CHAR},
      </if>
      <if test="record.tourno != null" >
        TourNo = #{record.tourno,jdbcType=VARCHAR},
      </if>
      <if test="record.tourname != null" >
        TourName = #{record.tourname,jdbcType=VARCHAR},
      </if>
      <if test="record.tourdate != null" >
        TourDate = #{record.tourdate,jdbcType=DATE},
      </if>
      <if test="record.duedate != null" >
        DueDate = #{record.duedate,jdbcType=DATE},
      </if>
      <if test="record.plannum != null" >
        PlanNum = #{record.plannum,jdbcType=INTEGER},
      </if>
      <if test="record.minnum != null" >
        MinNum = #{record.minnum,jdbcType=INTEGER},
      </if>
      <if test="record.seatnum != null" >
        SeatNum = #{record.seatnum,jdbcType=INTEGER},
      </if>
      <if test="record.refdepflight != null" >
        RefDepFlight = #{record.refdepflight,jdbcType=VARCHAR},
      </if>
      <if test="record.refbackflight != null" >
        RefBackFlight = #{record.refbackflight,jdbcType=VARCHAR},
      </if>
      <if test="record.tourstatus != null" >
        TourStatus = #{record.tourstatus,jdbcType=INTEGER},
      </if>
      <if test="record.createddate != null" >
        CreatedDate = #{record.createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdby != null" >
        CreatedBy = #{record.createdby,jdbcType=VARCHAR},
      </if>
      <if test="record.createdbyid != null" >
        CreatedByID = #{record.createdbyid,jdbcType=CHAR},
      </if>
      <if test="record.deptid != null" >
        DeptID = #{record.deptid,jdbcType=CHAR},
      </if>
      <if test="record.orgid != null" >
        OrgID = #{record.orgid,jdbcType=CHAR},
      </if>
      <if test="record.reviseddate != null" >
        RevisedDate = #{record.reviseddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.revisedby != null" >
        RevisedBy = #{record.revisedby,jdbcType=VARCHAR},
      </if>
      <if test="record.istail != null" >
        IsTail = #{record.istail,jdbcType=INTEGER},
      </if>
      <if test="record.tailauditstatus != null" >
        TailAuditStatus = #{record.tailauditstatus,jdbcType=INTEGER},
      </if>
      <if test="record.isack != null" >
        IsAck = #{record.isack,jdbcType=INTEGER},
      </if>
      <if test="record.hastraffic != null" >
        HasTraffic = #{record.hastraffic,jdbcType=INTEGER},
      </if>
      <if test="record.isusediscount != null" >
        IsUseDiscount = #{record.isusediscount,jdbcType=BIT},
      </if>
      <if test="record.issigned != null" >
        IsSigned = #{record.issigned,jdbcType=INTEGER},
      </if>
      <if test="record.tourescortnum != null" >
        TourEscortNum = #{record.tourescortnum,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Pro_Tour
    set ID = #{record.id,jdbcType=CHAR},
    ProID = #{record.proid,jdbcType=CHAR},
    TourNo = #{record.tourno,jdbcType=VARCHAR},
    TourName = #{record.tourname,jdbcType=VARCHAR},
    TourDate = #{record.tourdate,jdbcType=DATE},
    DueDate = #{record.duedate,jdbcType=DATE},
    PlanNum = #{record.plannum,jdbcType=INTEGER},
    MinNum = #{record.minnum,jdbcType=INTEGER},
    SeatNum = #{record.seatnum,jdbcType=INTEGER},
    RefDepFlight = #{record.refdepflight,jdbcType=VARCHAR},
    RefBackFlight = #{record.refbackflight,jdbcType=VARCHAR},
    TourStatus = #{record.tourstatus,jdbcType=INTEGER},
    CreatedDate = #{record.createddate,jdbcType=TIMESTAMP},
    CreatedBy = #{record.createdby,jdbcType=VARCHAR},
    CreatedByID = #{record.createdbyid,jdbcType=CHAR},
    DeptID = #{record.deptid,jdbcType=CHAR},
    OrgID = #{record.orgid,jdbcType=CHAR},
    RevisedDate = #{record.reviseddate,jdbcType=TIMESTAMP},
    RevisedBy = #{record.revisedby,jdbcType=VARCHAR},
    IsTail = #{record.istail,jdbcType=INTEGER},
    TailAuditStatus = #{record.tailauditstatus,jdbcType=INTEGER},
    IsAck = #{record.isack,jdbcType=INTEGER},
    HasTraffic = #{record.hastraffic,jdbcType=INTEGER},
    IsUseDiscount = #{record.isusediscount,jdbcType=BIT},
    IsSigned = #{record.issigned,jdbcType=INTEGER},
    TourEscortNum = #{record.tourescortnum,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.holyrobot.con_product.pojo.ProTour" >
    update Pro_Tour
    <set >
      <if test="proid != null" >
        ProID = #{proid,jdbcType=CHAR},
      </if>
      <if test="tourno != null" >
        TourNo = #{tourno,jdbcType=VARCHAR},
      </if>
      <if test="tourname != null" >
        TourName = #{tourname,jdbcType=VARCHAR},
      </if>
      <if test="tourdate != null" >
        TourDate = #{tourdate,jdbcType=DATE},
      </if>
      <if test="duedate != null" >
        DueDate = #{duedate,jdbcType=DATE},
      </if>
      <if test="plannum != null" >
        PlanNum = #{plannum,jdbcType=INTEGER},
      </if>
      <if test="minnum != null" >
        MinNum = #{minnum,jdbcType=INTEGER},
      </if>
      <if test="seatnum != null" >
        SeatNum = #{seatnum,jdbcType=INTEGER},
      </if>
      <if test="refdepflight != null" >
        RefDepFlight = #{refdepflight,jdbcType=VARCHAR},
      </if>
      <if test="refbackflight != null" >
        RefBackFlight = #{refbackflight,jdbcType=VARCHAR},
      </if>
      <if test="tourstatus != null" >
        TourStatus = #{tourstatus,jdbcType=INTEGER},
      </if>
      <if test="createddate != null" >
        CreatedDate = #{createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdby != null" >
        CreatedBy = #{createdby,jdbcType=VARCHAR},
      </if>
      <if test="createdbyid != null" >
        CreatedByID = #{createdbyid,jdbcType=CHAR},
      </if>
      <if test="deptid != null" >
        DeptID = #{deptid,jdbcType=CHAR},
      </if>
      <if test="orgid != null" >
        OrgID = #{orgid,jdbcType=CHAR},
      </if>
      <if test="reviseddate != null" >
        RevisedDate = #{reviseddate,jdbcType=TIMESTAMP},
      </if>
      <if test="revisedby != null" >
        RevisedBy = #{revisedby,jdbcType=VARCHAR},
      </if>
      <if test="istail != null" >
        IsTail = #{istail,jdbcType=INTEGER},
      </if>
      <if test="tailauditstatus != null" >
        TailAuditStatus = #{tailauditstatus,jdbcType=INTEGER},
      </if>
      <if test="isack != null" >
        IsAck = #{isack,jdbcType=INTEGER},
      </if>
      <if test="hastraffic != null" >
        HasTraffic = #{hastraffic,jdbcType=INTEGER},
      </if>
      <if test="isusediscount != null" >
        IsUseDiscount = #{isusediscount,jdbcType=BIT},
      </if>
      <if test="issigned != null" >
        IsSigned = #{issigned,jdbcType=INTEGER},
      </if>
      <if test="tourescortnum != null" >
        TourEscortNum = #{tourescortnum,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.holyrobot.con_product.pojo.ProTour" >
    update Pro_Tour
    set ProID = #{proid,jdbcType=CHAR},
      TourNo = #{tourno,jdbcType=VARCHAR},
      TourName = #{tourname,jdbcType=VARCHAR},
      TourDate = #{tourdate,jdbcType=DATE},
      DueDate = #{duedate,jdbcType=DATE},
      PlanNum = #{plannum,jdbcType=INTEGER},
      MinNum = #{minnum,jdbcType=INTEGER},
      SeatNum = #{seatnum,jdbcType=INTEGER},
      RefDepFlight = #{refdepflight,jdbcType=VARCHAR},
      RefBackFlight = #{refbackflight,jdbcType=VARCHAR},
      TourStatus = #{tourstatus,jdbcType=INTEGER},
      CreatedDate = #{createddate,jdbcType=TIMESTAMP},
      CreatedBy = #{createdby,jdbcType=VARCHAR},
      CreatedByID = #{createdbyid,jdbcType=CHAR},
      DeptID = #{deptid,jdbcType=CHAR},
      OrgID = #{orgid,jdbcType=CHAR},
      RevisedDate = #{reviseddate,jdbcType=TIMESTAMP},
      RevisedBy = #{revisedby,jdbcType=VARCHAR},
      IsTail = #{istail,jdbcType=INTEGER},
      TailAuditStatus = #{tailauditstatus,jdbcType=INTEGER},
      IsAck = #{isack,jdbcType=INTEGER},
      HasTraffic = #{hastraffic,jdbcType=INTEGER},
      IsUseDiscount = #{isusediscount,jdbcType=BIT},
      IsSigned = #{issigned,jdbcType=INTEGER},
      TourEscortNum = #{tourescortnum,jdbcType=INTEGER}
    where ID = #{id,jdbcType=CHAR}
  </update>

  <!-- 查询团期集合地点 -->
  <select id="listVenue" parameterType="java.lang.String" resultType="com.holyrobot.dto.TourVenueBo">
    select
    b.TourDate as tourDate,a.Venue as venue,a.CollectionTime as collectionTime,a.ShuttlePrice as shuttlePrice,
    a.DropOffPrice as dropOffPrice
    from Pro_Tour_Venue a inner join Pro_Tour b
    on a.TourID=b.ID
    where b.ID=#{id}
  </select>
  <!-- 查询团期价格策略列表 -->
  <select id="listPricePolicy"  resultType="com.holyrobot.dto.TourPricePolicyBo">
    select
    a.ID as id,a.TouristType as touristType,a.PolicyName as policyName,a.SalesPrice as salesPrice,a.RebatePrice as rebatePrice,
    a.SingleRoomPrice as singleRoomPrice,a.ProCost as proCost,a.IsDefault as def,a.IsOccupySeat as seat,
    a.OrderIndex as orderIndex,a.DirectPrice as directPrice,b.IsUseDiscount as isUseDiscount,a.BeforeDiscountSalesPrice as beforeDiscountSalesPrice,
    a.DiscountDirectPrice as discountDirectPrice,a.BeforeDiscountDirectPrice as beforeDiscountDirectPrice,a.DiscountSalesPrice as discountSalesPrice,
    a.DiscountValue as discountValue,a.DiscountType as discountType
    ,a.volunteerDirectPrice,a.volunteerRebatePrice,a.volunteerSalesPrice,a.travelerRewardPrice
    from Pro_Tour_PricePolicy a inner join Pro_Tour b
    on a.TourID=b.ID
    where b.ID=#{id} and a.SiteID=#{siteId}
  </select>
  <!-- 查询团期订单 -->
  <select id="listTourOrder"  resultType="com.holyrobot.dto.ProductTourOrderInfoBo">
    select
    a.OrderName as orderName,a.ScheduleDays as scheduleDays,a.Category as category,a.OrderType as orderType,
    a.TourDate as tourDate,a.ReturnDate as returnDate,a.DepName as depName,a.DestName as destName,a.OrderNo as orderNo,
    a.CustomerUnitID as customerUnitId,a.CustomerName as customerName,a.OrderSourceId as orderSourceId,a.OrderSource as orderSource,
    a.Contact as contact,a.Mobile as mobile,a.DataStatus as dataStatus,a.HasTraffic as hasAirTicket,a.AdjustAmt as adjustAmt,
    a.ReceivableAmt as receivableAmt,a.PayableAmt as payableAmt,a.AdultNum as adultNum,a.ChildNum as childNum,a.GuideNum as guideNum,
    a.Comment as comment
    from Ord_OrderInfo a inner join Pro_Tour b
    on a.TourID=b.ID
    where a.TourID=#{id} and b.TourDate like '%${tourDate}%'
  </select>

  <select id="listTour" resultType="com.holyrobot.dto.TourBo">
    select
    (a.PlanNum - ISNULL(d.VisitorNum, 0) - ISNULL(a.TourEscortNum, 0)) as stock,
    a.ID as id, a.TourNo as tourNo,a.TourName as tourName,a.TourDate as tourDate,a.DueDate as dueDate,
    a.PlanNum as planNum,a.MinNum as minNum,a.SeatNum as seatNum,a.RefDepFlight as refDepFlight,a.RefBackFlight as refBackFlight,
    a.TourStatus as tourStatus,b.SalesPrice as salesPrice,b.DirectPrice as directPrice, a.IsTail as isTail,a.TailAuditStatus as tailAuditStatus,
    a.IsAck as isAck,a.HasTraffic as hasTraffic,a.IsUseDiscount as isUseDiscount,b.BeforeDiscountSalesPrice as beforeDiscountSalesPrice,
    b.DiscountDirectPrice as discountDirectPrice,b.BeforeDiscountDirectPrice as beforeDiscountDirectPrice,b.DiscountSalesPrice as discountSalesPrice,
    b.DiscountValue as discountValue,b.DiscountType as discountType
    ,b.volunteerDirectPrice,b.volunteerRebatePrice,b.volunteerSalesPrice
    from Pro_Tour a
    inner join Pro_Tour_PricePolicy b
    INNER JOIN Pro_Tour_Scope as s on s.TourID = b.TourID on a.ID=b.TourID

    LEFT JOIN (SELECT   SUM(a.VisitorNum) VisitorNum, TourID
    FROM      Ord_Order_Price a INNER JOIN
    Ord_OrderInfo b ON a.OrderID = b.ID
    WHERE   a.IsSeat = 1 AND (b.DataStatus != - 1 AND b.DataStatus != - 3)  AND
    b.ID NOT IN
    (SELECT   ToOrderID
    FROM      dbo.Ord_OrderToInside) AND b.ID NOT IN
    (SELECT   ParentOrderID
    FROM      [Ord_OrderRelationship])
    GROUP BY TourID) AS d ON a.ID = d .TourID

    where b.IsDefault=1
    AND s.DataStatus = 1
    AND S.Scope = 2
    and a.TourDate like '%${tourDate}%'
    and a.DueDate > DATEADD(DAY, -1, GETDATE())
    and a.ProID=#{id} and a.TourStatus!=-1 and b.SiteID=#{siteId} order by a.TourDate
  </select>

  <select id="listTourLimit" resultType="com.holyrobot.dto.TourBo">
    select
    top 7
    a.ID as id, a.TourNo as tourNo,a.TourName as tourName,a.TourDate as tourDate,a.DueDate as dueDate,
    a.PlanNum as planNum,a.MinNum as minNum,a.SeatNum as seatNum,a.RefDepFlight as refDepFlight,a.RefBackFlight as refBackFlight,
    a.TourStatus as tourStatus,b.SalesPrice as salesPrice,b.DirectPrice as directPrice
    ,b.volunteerDirectPrice,b.volunteerRebatePrice,b.volunteerSalesPrice
    from Pro_Tour a inner join Pro_Tour_PricePolicy b
    on a.ID=b.TourID
    where b.IsDefault=1 and a.TourDate >= #{tourDate} and a.DueDate >= #{tourDate}
    and a.ProID=#{id} and a.TourStatus!=-1 and b.SiteID=#{siteId} order by a.TourDate
  </select>

  <!--查询返回所有团期-->
  <select id="selectTourPriceByDirect" resultType="com.holyrobot.dto.ProductDetailPriceDto" >
    SELECT TOP 1
     BeforeDiscountDirectPrice as oldPrice,DirectPrice as nowPrice
    FROM
    Pro_Tour AS a
    INNER JOIN Pro_Tour_PricePolicy AS b ON a.ID = b.TourID
    WHERE
    a.ProID = #{proId}
    AND b.IsDefault = 1
    AND b.SiteID = #{siteId}
    AND a.DueDate > DATEADD(DAY, -1, GETDATE())
    ORDER BY DirectPrice ASC
  </select>

  <select id="selectTourPriceBySale" resultType="com.holyrobot.dto.ProductDetailPriceDto" >
    SELECT TOP 1
     BeforeDiscountSalesPrice as oldPrice,SalesPrice as nowPrice
    FROM
    Pro_Tour AS a
    INNER JOIN Pro_Tour_PricePolicy AS b ON a.ID = b.TourID
    WHERE
    a.ProID = #{proId}
    AND b.IsDefault = 1
    AND b.SiteID = #{siteId}
    AND a.DueDate > DATEADD(DAY, -1, GETDATE())
    ORDER BY SalesPrice ASC
  </select>

  <select id="selectVisitorNumByTours" resultType="java.lang.Integer">
    SELECT   ISNULL(SUM(a.VisitorNum), 0) VisitorNum
    FROM      Ord_Order_Price a
    INNER JOIN Ord_OrderInfo b ON a.OrderID = b.ID
    WHERE     a.IsSeat = 1
    AND (b.DataStatus != -1 AND b.DataStatus != -3) --取消 和 取消订单
    AND b.ID NOT IN ( SELECT    ToOrderID
    FROM      dbo.Ord_OrderToInside )
    AND b.ID NOT IN ( SELECT    ParentOrderID
    FROM      Ord_OrderRelationship)
    and b.TourID = #{tourId}
  </select>

  <select id="manyTours" resultType="com.holyrobot.dto.ManyToursDto">
    SELECT
    TourNo,
    i.TourID,
    t.TourDate,
    i.SalesPrice,
    i.DirectPrice
    FROM
    Pro_Tour t
    LEFT JOIN Pro_Tour_PricePolicy i ON i.TourID = t.id
    WHERE
    t.ProID = #{proId}
    AND i.SiteID = #{siteId}
    AND t.TourDate = #{tourDate}
    AND i.IsDefault = 1
    ORDER BY i.SalesPrice
  </select>

</mapper>